trigger:
  branches:
    include:
    - main
variables:
- name: backendstoragerg
  value: 'storagerg'
- name: backendstoragename
  value: 'storagerg09'
- name: backendcontainer
  value: 'tfstate01'
- name: backendstoragekey
  value: 'demo.terraform.tfstate'
stages:
- stage: build
  jobs:
  - job: Job_1
    displayName: Agent job 1
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: 6d15af64-176c-496d-b583-fd2ae21d4df4@1
      inputs:
        repository: self
        fetchDepth: 1
    - task: CopyFiles@2
      displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
      inputs:
        SourceFolder: azure_storage
        TargetFolder: $(build.artifactstagingdirectory)
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: drop'
- stage: tfvalidate
  jobs:
  - job: validate
    continueOnError: false
    steps:
    - task: TerraformInstaller@1
      displayName: tfinstall
      inputs:
        terraformVersion: 'latest'
    - task: TerraformTaskV4@4
      displayName: init
      inputs:
        workingDirectory: '$(System.DefaultWorkingDirectory)/[InputArtifactSourceAlias]/drop/[TfScriptDir]'
        provider: 'azurerm'
        command: 'init'
        backendServiceArm: 'terraform'
        backendAzureRmResourceGroupName: '$(backendstoragerg)'
        backendAzureRmStorageAccountName: '$(backendstoragename)'
        backendAzureRmContainerName: '$(backendcontainer)'
        backendAzureRmKey: '$(backendstoragekey)'
    - task: TerraformTaskV4@4
      displayName: validate
      inputs:
        workingDirectory: '$(System.DefaultWorkingDirectory)/azure_storage/'
        provider: 'azurerm'
        command: 'validate'
- stage: tfdeploy
  condition: succeeded('tfvalidate')
  dependsOn:
  - tfvalidate
  jobs:
  - job: apply
    steps:
    - task: TerraformInstaller@1
      displayName: tfinstall
      inputs:
        terraformVersion: 'latest'
    - task: TerraformTaskV4@4
      displayName: init
      inputs:
        workingDirectory: '$(System.DefaultWorkingDirectory)/azure_storage/'
        provider: 'azurerm'
        command: 'init'
        backendServiceArm: 'terraform'
        backendAzureRmResourceGroupName: '$(backendstoragerg)'
        backendAzureRmStorageAccountName: '$(backendstoragename)'
        backendAzureRmContainerName: '$(backendcontainer)'
        backendAzureRmKey: '$(backendstoragekey)'
    - task: TerraformTaskV4@4
      displayName: plan
      inputs:
        workingDirectory: '$(System.DefaultWorkingDirectory)/azure_storage/'
        provider: 'azurerm'
        command: 'plan'
        environmentServiceNameAzureRM: 'terraform'
    - task: TerraformTaskV4@4
      displayName: apply
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/azure_storage/'
        environmentServiceNameAzureRM: 'terraform'

